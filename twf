#!/usr/bin/perl -w

# twf : Turn "tree walk format" flat files into groff/dot format
#
# Copyright (C) 2020 Charles Suresh <charles.suresh@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

use Getopt::Long;
my $debug; GetOptions("d" =>\$debug) or usage();

sub usage {
	die "usage: $0 [-d] file.twf\n";
}

my $rem=[];
my $stk=[];
my ($back,$fam,$acc,$pid,$r,$match,$id,$fid,$f,$m,@c,$age,$l,$nopush);
my $ssn=0;
sub process_rest {
	chomp;
	return if (/^\s*$/);
	return if (/^\s*\#.*/);
	s/\s*\#.*$//;
	($f,$m,@c)=split(/\|/);
	#print "$f + $m = ",join(' ', @c), "\n";
	$fid++;
	print qq(f$fid [shape=record,label="{{);
	my $x=0;
	my $find=0;
print join(", ","stack:",map($_->[0], @$stk)), "\n" if ($debug);
	if ($r=pop @$stk) {
		($match,$fam,$id)=@$r;
print "Looking for $match $fam $id\n" if ($debug);
		$find=1;
	}
	$acc="";
	for my $i ($f,$m,@c) {
		$age=0;
		$back=0;
		$nopush=0;
		next unless defined($i);
		if ($i eq '?') {
			# name unknown
			$nopush=1;
		} elsif ($i eq '-') {
			# unknown birth order for remaining children
			$nopush=1;
		} elsif ($i=~s/,\?$//) {
			# age unknown
		} elsif ($i=~s/,(\d+)(\?)?(\.)?$//) {
			# age known
			$age=$1;
			if (defined $2 and $2 eq '?') {
				# age known but may be incorrect
				$age.=$2;
			}
			if (defined $3 and $3 eq '.') {
				$i.=$3;
			}
		}
		$l=$i;
		if ($nopush or $i=~s/\.$//) {
			$l=$i;
			# leaf node: story ends here
		} else {
			# more info available
			if ($i=~s/\!$//) {
				# graph not tree, backtrack, remove from history
				$l=$i;
				$back=1;
			}
			if ($i=~s/\^$//) {
				$l=$i; # forward reference
				unshift @$stk, [$i,$fid,$ssn];
			} else {
				$i=~s/\s+\([^\)]+\)$//;
				if ($find and defined $match and $match eq $i) {
					push @$rem, [$i,$fam,$id] unless $back;
				} else {
					push @$rem, [$i,$fid,$ssn] unless $back;
				}
			}
		}
		$l.=",$age" if ($age);
		my $skip=0;
		my $parent=($x++<2);
		if ($find and defined $match and $match eq $i) {
			$pid=$id;
			$find=0;
			$skip=1;
		} elsif ($back) {
print "Remove $i from stack\n" if ($debug);
			for my $k (0..@$stk-1) {
				my $j=$stk->[$k];
				if ($j->[0] eq $i) {
					my ($ign,$ftmp,$id)=@$j;
					$pid=$id;
					splice(@$stk,$k,1);
print "Hack1 f$fid:i$id -> f$ftmp:i$id;\n" if ($debug);
					if ($parent) {
						$acc.="f$ftmp:i$id -> f$fid:i$id;\n";
					} else {
						$acc.="f$fid:i$id -> f$ftmp:i$id;\n";
					}
					last;
				}
			}
		} else {
			$pid=$ssn;
			$ssn++;
		}
		if ($parent) {
			print "|" if ($x==2);
			print "<i$pid>$l";
			print "}" if ($x==2);
			if ($skip) {
				$acc.="f$fam:i$id -> f$fid:i$id;\n";
			}
		} else {
			if ($skip) {
				print "|{<i$pid>$l}";
				$acc.="f$fid:i$pid -> f$fam:i$id;\n";
			} else {
				print "|{<i$pid>$l}";
			}
		}
	}
	print qq(}"];\n);
	print $acc if ($acc ne '');
	die "couldn't find $match" if ($find);
	while ($r=pop @$rem) {
		push @$stk, $r;
	}
}
sub readfile {
	my ($f)=@_;
	my $stdin;
	open($stdin,$f) or die "can't open $f";
	while (<$stdin>) {
		process();
	}
	close($stdin);
}
sub process {
	if (/^include (.*)/) {
		readfile($1);
	} else {
		process_rest();
	}
}
print "digraph {\n";
while (<>) {
	process();
}
print "}\n";
